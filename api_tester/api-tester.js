/**
 * @author Mark Snyder
 * @copyright Copyright 2019-2022 Utah State University
 */

let stateHistory, responses; // []
let currentState; // appState
let currentStateIndex, blankCounter; // int

$(document).ready(function () {

  gadget.ready().then(gadget.fetch).then(() => {

    stateHistory = [];
    responses = []; // storing responses so that the can be referenced later in the console
    currentState = new appState();
    currentStateIndex = 0;
    blankCounter = 1000; // used for when a param is created by the user rather than being generated by the appState

    pushPopParam();

    $('#loading').hide();
    $('#main').show();
    $('#gadget-toolbar-container').show();
  });
});

/**
 * An class that is used to store request details and interact with the GUI.
 */
class appState {

  constructor(type = 'GET', endpoint = '/', params = [], site = false) {
    this.type = type;
    this.endpoint = endpoint;
    this.params = params;
    this.site = site;
  }

  /**
   * Pulls all the user submitted data and stores it.
   */
  loadInput() {
    this.type = document.getElementById('type').options[document.getElementById('type').selectedIndex].value;
    this.endpoint = document.getElementById('endpoint').value;

    this.params = [];
    let params = document.getElementsByClassName('param');

    for (let i = 0; i < params.length; i++) {
      let inputs = params[i].getElementsByTagName('input');
      if (inputs[0].value
        && inputs[1].value) {
        let obj = {};
        obj[inputs[0].value] = inputs[1].value;
        this.params.push(obj);
      }
    }

    this.site = document.getElementById('checkbox-site').checked;
  }

  /**
   * Takes the stored data and fills out the GUI to match.
   */
  loadState() {
    let type = document.getElementById('type');
    let typeOptions = type.getElementsByTagName('option');
    for (let i = 0; i < typeOptions.length; i++) {
      if (typeOptions[i].value === this.type) {
        type.selectedIndex = i;
        break;
      }
    }

    document.getElementById('endpoint').value = this.endpoint;

    document.getElementById('params').innerHTML = '';
    for (let i = 0; i < this.params.length; i++) {
      document.getElementById('params').appendChild(cloneParam(i, Object.keys(this.params[i])[0], this.params[i][Object.keys(this.params[i])[0]]));
    }

    if (this.params.length === 0) document.getElementById('add-new-param').style.display = 'block';
    else document.getElementById('add-new-param').style.display = 'none';

    document.getElementById('checkbox-site').checked = this.site;
  }
}

/**
 * Takes user submitted data and makes the desired network request.
 */
function customRequest() {

  currentState.loadInput();

  let url = gadget.apihost + currentState.endpoint + '?authorization_token=' + gadget.token;

  if (currentState.site) url += '&site=' + gadget.site;

  for (let i = 0; i < currentState.params.length; i++) {
    let key = Object.keys(currentState.params[i])[0];
    url += '&' + key + '=' + currentState.params[i][key];
  }

  url = encodeURI(url);

  let printParams = Array.from(currentState.params);
  if (currentState.site) printParams.push({site: gadget.site});

  console.log('======== Making Request ========');
  console.log('        URL: ' + url);
  console.log('HTTP Method:', currentState.type);
  console.log('   Endpoint:', currentState.endpoint);
  console.log(' Parameters:', printParams);

  let req = new XMLHttpRequest();

  req.addEventListener('load', transferComplete);
  req.addEventListener('error', transferFailed);
  req.addEventListener('abort', transferCanceled);
  req.open(currentState.type, url, true);
  req.setRequestHeader('X-Auth-Token', gadget.token);
  req.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
  req.setRequestHeader('Accept', '*/*');
  req.send();

  responses.push(req);
  stateHistory.push(new appState(currentState.type, currentState.endpoint, currentState.params, currentState.site));
  currentStateIndex = stateHistory.length - 1;
  historyButtons();
}

/**
 * TRANSFER FUNCTIONS
 * These functions define the message to be printed with the response and are called depending on the success or failure of the response.
 */
function transferComplete() {
  handleResp('   Response:');
}

function transferFailed() {
  handleResp('Network Request Failed. Response:');
}

function transferCanceled() {
  handleResp('Network Request Cancelled. Response:');
}

/**
 * Takes the response from the network request and parses it to be printed in the console.
 * @param {String} msg A message to be printed with the network request that is defined by the success or failure of the request.
 */
function handleResp(msg = '') {
  let resp;

  try {
    resp = JSON.parse(responses[responses.length - 1].response);
  } catch (e) {
    resp = responses[responses.length - 1].response;
  }
  responses[responses.length - 1] = resp;

  console.log(msg, responses[responses.length - 1]);
}

/**
 * Gets the appState from a previous network request and pushes it to the GUI.
 * @param {boolean} prev Determines whether going backwards (true) or forwards (false) in the stateHistory.
 */
function loadHistory(prev = true) {
  if (prev) stateHistory[--currentStateIndex].loadState();
  else stateHistory[++currentStateIndex].loadState();
  historyButtons();
}

/**
 * Enables or disables the buttons for navigating the stateHistory.
 */
function historyButtons() {
  document.getElementById('prev').disabled = (currentStateIndex === 0);
  document.getElementById('next').disabled = (currentStateIndex === stateHistory.length - 1);
}

/**
 * Adds or removes a parameter from the GUI.
 * @param {boolean} add Defines whether or not the function should add a parameter (true) or remove one (false).
 * @param {String} id The id attribute of the element in question. Only necessary when add is false.
 */
function pushPopParam(add = true, id = '') {
  if (add) document.getElementById('params').appendChild(cloneParam(blankCounter++));
  else document.getElementById(id).parentNode.removeChild(document.getElementById(id));

  if (document.getElementsByClassName('param').length === 0) document.getElementById('add-new-param').style.display = 'block';
  else document.getElementById('add-new-param').style.display = 'none';
}

/**
 * Clones the default HTML param and modifies the clone to be added to the GUI.
 * @param {Number} index The numerical id of the cloned param.
 * @param {String} key The key of the parameter that will be set as the value for the text input.
 * @param {String} val The value of the parameter that will be set as the value for the text input.
 * @returns {Node} Returns the cloned HTML parameter.
 */
function cloneParam(index = 0, key = '', val = '') {
  let clone = document.getElementById('clone-param').cloneNode(true);
  let inputKey = clone.getElementsByTagName('input')[0];
  let inputVal = clone.getElementsByTagName('input')[1];
  let buttonRemove = clone.getElementsByTagName('button')[0];

  clone.id = 'param-' + index;
  clone.classList.add('param');
  inputKey.id = 'param-key-' + index;
  inputKey.value = key;
  inputVal.id = 'param-val-' + index;
  inputVal.value = val;

  buttonRemove.addEventListener('click', () => {
    pushPopParam(false, clone.id);
  });

  return clone;
}